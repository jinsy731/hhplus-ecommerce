server:
  tomcat:
    threads:
      max: 300       # 최대 워커 쓰레드 수 (기본 200)
      min-spare: 50  # 대기 중 쓰레드 최소 개수 (기본 10)
      
spring:
  application:
    name: hhplus
#  profiles:
#    active: local
  datasource:
    name: HangHaePlusDataSource
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 16
      connection-timeout: 10000
      max-lifetime: 60000
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    open-in-view: false
    generate-ddl: true
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate.show_sql: false
      hibernate.timezone.default_storage: NORMALIZE_UTC
      hibernate.jdbc.time_zone: UTC
      hibernate.format_sql: false
      hibernate.highlight_sql: false
      hibernate.use_sql_comments: false
      hibernate.default_batch_fetch_size: 100
  sql:
    init:
      mode: never
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: true
  output:
    ansi:
      enabled: always

  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 2147483647
      enable-idempotence: true
      max-in-flight-requests-per-connection: 5
      delivery-timeout-ms: 120000
      request-timeout-ms: 30000
      retry-backoff-ms: 100
      batch-size: 16384
      linger-ms: 5
      compression-type: snappy
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      enable-auto-commit: false
      auto-offset-reset: earliest
      max-poll-records: 500
      max-poll-interval-ms: 300000
      session-timeout-ms: 30000
      heartbeat-interval-ms: 3000
      isolation-level: read-committed
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: "kr.hhplus.be.server.shared.event.KafkaEventMessage"

---
spring.config.activate.on-profile: local, test

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/hhplus?characterEncoding=UTF-8&serverTimezone=UTC
    username: application
    password: application

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 3000

  kafka:
    bootstrap-servers: localhost:9094


logging:
  level:
    org.hibernate:
      SQL: WARN
      description.sql.BasicBinder: TRACE
      org.apache.coyote: INFO
      org.apache.tomcat.util.net: DEBUG
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"

---
spring.config.activate.on-profile: load-test

management:
  endpoints:
    web:
      exposure:
        include: ["*"]
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    enable:
      jvm: true
      system: true
      process: true
      hikaricp: true
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}
  endpoint:
    metrics:
      access: unrestricted
    prometheus:
      access: unrestricted


spring:
  datasource:
    url: jdbc:mysql://mysql:3306/hhplus?characterEncoding=UTF-8&serverTimezone=UTC
    username: application
    password: application

  data:
    redis:
      host: redis
      port: 6379
      timeout: 3000

  kafka:
    bootstrap-servers: kafka:9092


logging:
  level:
    org.apache.coyote: INFO
    org.apache.tomcat.util.net: DEBUG
    org.hibernate:
      SQL: WARN

  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
